// Generated by LispyScript v1.5.0
require("./require");
function sf_jscode(arr) {
  assertArgs(arr,2,"e0");
  gNoSemiColon = true;
  arr[1].replaceRight(new Regex("\"","g"),"");
  return arr[1];
}
function sf_macro(arr) {
  assertArgs(arr,4,"e0");
  assertNode(arr[1]);
  assertForm(arr[2]);
  (function () {
    let recur = null,
      ___xs = null,
      ___f = function (i,times) {
        return ((times > i) ?
          (function () {
            ((((arr[2][i])["name"] === VARGS) && ((i + 1) !== (arr[2])["length"])) ?
              synError("e15",arr,(arr[1])["name"]) :
              undefined);
            return recur((i + 1),times);
          })() :
          undefined);
      },
      ___ret = ___f;
    recur = function () {
      ___xs = arguments;
      return ((!(typeof(___ret) === "undefined")) ?
        (function () {
          for (___ret=undefined; ___ret===undefined; 
               ___ret=___f.apply(this,___xs));
          return ___ret;
        })() :
        undefined);
    };
    return recur(0,(arr[2])["length"]);
  })();
  MACROS_MAP[(arr[1])["name"]] = {
    args: arr[2],
    code: arr[3]
  };
  return "";
}
function sf_not(arr) {
  assertArgs(arr,2,"e0");
  evalSexp(arr);
  return ["(!",arr[1],")"].join('');
}
function dbg(obj,hint) {
  return ((Object.prototype.toString.call(obj) === "[object Array]") ?
    (function () {
      hint = (hint || "block");
      console.log(["<",hint,">"].join(''));
      (function () {
        let recur = null,
          ___xs = null,
          ___f = function (i,times) {
            return ((times > i) ?
              (function () {
                dbg(obj[i]);
                return recur((i + 1),times);
              })() :
              undefined);
          },
          ___ret = ___f;
        recur = function () {
          ___xs = arguments;
          return ((!(typeof(___ret) === "undefined")) ?
            (function () {
              for (___ret=undefined; ___ret===undefined; 
                   ___ret=___f.apply(this,___xs));
              return ___ret;
            })() :
            undefined);
        };
        return recur(0,(obj)["length"]);
      })();
      return console.log(["</",hint,">"].join(''));
    })() :
    (isNode_QUERY(obj) ?
      (function () {
        console.log("<node>");
        console.log(obj);
        dbg((obj)["children"],"subs");
        return console.log("</node>");
      })() :
      (true ?
        console.log(obj) :
        undefined)));
}
function dbgAST(codeStr,fname) {
  return dbg(toAST(codeStr,fname),"tree");
}
function compileCode(codeStr,fname,srcMap_QUERY,incPaths) {
  ((Object.prototype.toString.call(incPaths) === "[object Array]") ?
    gIncludeDirs = incPaths :
    undefined);
  gIndent = (gIndent - gIndentSize);
  let outNode = evalAST(toAST(codeStr,fname));
  outNode.prepend(gBanner);
  return (srcMap_QUERY ?
    (function () {
      let outFile = [path.basename(fname,".lisp"),".js"].join(''),
        srcMap = [outFile,".map"].join(''),
        output = outNode.toStringWithSourceMap({
          file: outFile
        });
      fs.writeFileSync(srcMap,(output)["map"]);
      return [(output)["code"],"\n//# sourceMappingURL=",path.relative(path.dirname(fname),srcMap)].join('');
    })() :
    outNode.toString());
}
